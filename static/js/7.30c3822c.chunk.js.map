{"version":3,"sources":["modules/RedList/components/Table/TableValidator.selector.ts","modules/RedList/components/Table/TableValifator.enhanceData.tsx","services/httpValidator.ts","modules/RedList/components/Table/TableValidator.services.ts","modules/RedList/components/Table/TableValidator.actions.ts","modules/RedList/components/Table/TableValidator.enhanceFetchData.tsx","modules/RedList/components/Table/TableValidator.enhancePagination.tsx","modules/RedList/components/Table/TableValidator.enhance.tsx","modules/RedList/components/Table/TableValidator.tsx","modules/RedList/RedList.tsx","modules/NodeMonitor/components/Table/styled.tsx","components/Modal/index.tsx","modules/NodeMonitor/components/MonitorDetail/components/MonitorDetailModal/index.tsx"],"names":["tableValidatorSelector","createSelector","state","tableValidator","withData","WrappedComp","props","useSelector","currentPage","limitPage","rowsPerPage","data","fetching","visibleModal","ErrorBoundary","instanceValidator","axios","create","timeout","HEADERS","interceptors","request","use","req","baseURL","API_NODE_VALIDATOR_URL","headers","error","Promise","reject","response","res","result","Error","resolve","a","isAxiosError","getRedList","page","httpValidator","get","actionUpdateTableData","payload","type","ACTION_UPDATE_TABLE_DATA","actionFetchingTableData","ACTION_FETCHING_TABLE_DATA","actionUpdateVisibleModal","ACTION_CHANGE_VISIBLE_MODAL","withFetchData","dispatch","useDispatch","fetchData","getState","table","nodeIndex","ROWS_PER_PAGE","total","mapper","map","publicKey","index","name","NodesListBuilder","getListNodesInfo","join","listNodes","console","debug","React","useEffect","withPagination","handleChangePage","compose","handleClickTableCell","node","actionUpdateMonitorDetail","updateVisibleModal","visible","handleCloseMonitorModal","actionClearMonitorDetail","withEnhance","memo","handleChangeRowsPerPage","columns","MockupColumns","useTable","getTableProps","headerGroups","rows","prepareRow","onChangePage","_","onChangeRowsPerPage","Card","className","TableHead","headerGroup","TableRow","getHeaderGroupProps","column","TableCell","getHeaderProps","render","TableBody","row","getRowProps","cells","cell","value","original","Header","onClick","item","getCellProps","LoadingOverlay","TablePagination","component","count","rowsPerPageOptions","MonitorDetailModal","onClose","RedList","Styled","styled","div","theme","hoverRow","darkRow","headerRow","ModalWrapper","CloseWrapper","AnimatedDialogOverlay","animated","DialogOverlay","StyledDialogOverlay","modalBg","modalBG","AnimatedDialogContent","DialogContent","StyledDialogContent","minHeight","maxHeight","mobile","isOpen","rest","attrs","white","transparentize","css","mediaWidth","upToMedium","upToSmall","Modal","onDismiss","initialFocusRef","children","fadeTransition","useTransition","config","duration","from","opacity","enter","leave","key","style","aria-label","isMobile","width","height","MonitorDetail"],"mappings":"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","file":"static/js/7.30c3822c.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\nimport { IRootState } from 'src/redux/interface';\nimport { ITableValidatorReducer } from './TableValidator.interface';\n\nexport const tableValidatorSelector = createSelector(\n    (state: IRootState) => state.tableValidator,\n    (tableValidator: ITableValidatorReducer) => tableValidator,\n);\n","import React from 'react';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { useSelector } from 'react-redux';\nimport { tableValidatorSelector } from './TableValidator.selector';\n\ninterface IProps {}\n\nconst withData = (WrappedComp: React.FunctionComponent) => (props: IProps & any) => {\n    const { currentPage, limitPage, rowsPerPage, data, fetching, visibleModal } = useSelector(tableValidatorSelector);\n    return (\n        <ErrorBoundary>\n            <WrappedComp\n                {...{\n                    ...props,\n                    currentPage,\n                    limitPage,\n                    rowsPerPage,\n                    data,\n                    fetching,\n                    visibleModal,\n                }}\n            />\n        </ErrorBoundary>\n    );\n};\n\nexport default withData;\n","import axios from 'axios';\nimport { API_NODE_VALIDATOR_URL } from './configs';\n\nconst TIMEOUT = 20000;\nconst instanceValidator = axios.create({\n    timeout: TIMEOUT,\n});\n\nconst HEADERS = {};\n\ninstanceValidator.interceptors.request.use(\n    (req) => {\n        req.baseURL = API_NODE_VALIDATOR_URL;\n        req.headers = {\n            ...HEADERS,\n            ...req.headers,\n        };\n        return req;\n    },\n    (error) => {\n        Promise.reject(error);\n    },\n);\n\ninstanceValidator.interceptors.response.use(\n    (res) => {\n        const result = res?.data;\n        const error = res?.data?.Error;\n        if (error) {\n            return Promise.reject(error);\n        }\n        return Promise.resolve(result);\n    },\n    async (error) => {\n        if (error?.isAxiosError && !error?.response) {\n            throw new Error('Send request API failed');\n        }\n        return Promise.reject(error);\n    },\n);\n\nexport default instanceValidator;\n","import httpValidator from 'src/services/httpValidator';\n\nexport const getRedList = async (page: number) => {\n    return httpValidator.get(`redlist?page=${page}`);\n};\n","import { IRootState } from 'src/redux/interface';\nimport { Dispatch } from 'redux';\nimport { INodeName, ITableData } from 'src/modules/NodeMonitor/components/Table/Table.interface';\nimport { NodesListBuilder } from 'src/modules/NodeMonitor/components/Table/Table.builder';\nimport { getListNodesInfo } from 'src/modules/NodeMonitor/components/Table/Table.services';\nimport {\n    ACTION_UPDATE_TABLE_DATA,\n    ACTION_CHANGE_VISIBLE_MODAL,\n    ACTION_FETCHING_TABLE_DATA,\n} from 'src/modules/RedList/components/Table/TableValidator.actionsName';\nimport { getRedList } from './TableValidator.services';\nimport { ROWS_PER_PAGE } from './TableValidator.constants';\n\nexport const actionUpdateTableData = (payload: {\n    data: ITableData[];\n    currentPage?: number;\n    limitPage?: number;\n    isSearching?: boolean;\n}) => ({\n    type: ACTION_UPDATE_TABLE_DATA,\n    payload,\n});\n\nexport const actionFetchingTableData = (payload: { fetching: boolean }) => ({\n    type: ACTION_FETCHING_TABLE_DATA,\n    payload,\n});\n\nexport const actionUpdateVisibleModal = (payload: { visible?: boolean }) => ({\n    type: ACTION_CHANGE_VISIBLE_MODAL,\n    payload,\n});\n\nexport const actionGetRedList = (payload: { page: number }) => async (\n    dispatch: Dispatch,\n    getState: () => IRootState,\n) => {\n    try {\n        const { fetching } = getState().table;\n        if (fetching) return;\n        dispatch(actionFetchingTableData({ fetching: true }));\n        let { page } = payload;\n        page = page || 1;\n        const nodeIndex = (page - 1) * ROWS_PER_PAGE;\n        const { data, total } = (await getRedList(page)) as any;\n        const mapper: INodeName[] = data.map((publicKey: string, index: number) => ({\n            name: `Node ${nodeIndex + index + 1}`,\n            publicKey,\n        }));\n        const listNodes = NodesListBuilder(await getListNodesInfo(data.join(',')), mapper);\n        dispatch(actionUpdateTableData({ data: listNodes, currentPage: page - 1, limitPage: total }));\n    } catch (e) {\n        console.debug('Fetch Red List With Error', e);\n    } finally {\n        dispatch(actionFetchingTableData({ fetching: false }));\n    }\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { actionGetRedList } from './TableValidator.actions';\n\ninterface IProps {\n    fetchData: (page: number) => void;\n}\n\nconst withFetchData = (WrappedComp: React.FunctionComponent) => (props: IProps & any) => {\n    const dispatch = useDispatch();\n    const fetchData = (page: number) => dispatch(actionGetRedList({ page }));\n    React.useEffect(() => {\n        fetchData(0);\n    }, []);\n    return (\n        <ErrorBoundary>\n            <WrappedComp\n                {...{\n                    ...props,\n                    fetchData,\n                }}\n            />\n        </ErrorBoundary>\n    );\n};\n\nexport default withFetchData;\n","import React from 'react';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\n\ninterface IProps {\n    fetchData: (page: number) => void;\n}\n\nconst withPagination = (WrappedComp: React.FunctionComponent) => (props: IProps & any) => {\n    const { fetchData } = props;\n    const handleChangePage = async (page: number) => {\n        /** Change number page */\n        fetchData && fetchData(page);\n    };\n\n    return (\n        <ErrorBoundary>\n            <WrappedComp\n                {...{\n                    ...props,\n                    handleChangePage,\n                }}\n            />\n        </ErrorBoundary>\n    );\n};\n\nexport default withPagination;\n","import React from 'react';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { compose } from 'recompose';\nimport { useDispatch } from 'react-redux';\nimport withData from 'src/modules/RedList/components/Table/TableValifator.enhanceData';\nimport { ITableData } from 'src/modules/NodeMonitor/components/Table/Table.interface';\nimport {\n    actionClearMonitorDetail,\n    actionUpdateMonitorDetail,\n} from 'src/modules/NodeMonitor/components/MonitorDetail/MonitorDetail.actions';\nimport { actionUpdateVisibleModal as updateVisibleModal } from 'src/modules/RedList/components/Table/TableValidator.actions';\nimport withFetchData from './TableValidator.enhanceFetchData';\nimport withPagination from './TableValidator.enhancePagination';\n\ninterface IProps {}\nconst enhance = (WrappedComp: React.FunctionComponent) => (props: IProps & any) => {\n    const dispatch = useDispatch();\n\n    const handleClickTableCell = (node: ITableData) => {\n        dispatch(actionUpdateMonitorDetail({ node }));\n        dispatch(updateVisibleModal({ visible: true }));\n    };\n\n    const handleCloseMonitorModal = () => {\n        dispatch(updateVisibleModal({ visible: false }));\n        dispatch(actionClearMonitorDetail());\n    };\n    return (\n        <ErrorBoundary>\n            <WrappedComp\n                {...{\n                    ...props,\n                    handleClickTableCell,\n                    handleCloseMonitorModal,\n                }}\n            />\n        </ErrorBoundary>\n    );\n};\n\nexport default compose(withData, withFetchData, withPagination, enhance);\n","import React, { memo } from 'react';\nimport withEnhance from 'src/modules/RedList/components/Table/TableValidator.enhance';\nimport Card from '@material-ui/core/Card';\nimport MaUTable from '@material-ui/core/Table';\nimport LoadingOverlay from 'src/components/LoadingOverlay';\nimport { ITableNodeProps } from 'src/modules/NodeMonitor/components/Table';\nimport { useTable } from 'react-table';\nimport { MockupColumns } from 'src/modules/NodeMonitor/NodeMonitor.mockupData';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport { ITableData } from 'src/modules/NodeMonitor/components/Table/Table.interface';\nimport { Styled } from 'src/modules/NodeMonitor/components/Table/styled';\nimport MonitorDetailModal from 'src/modules/NodeMonitor/components/MonitorDetail/components/MonitorDetailModal';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst TableValidator = memo((props: ITableNodeProps & any) => {\n    const {\n        currentPage,\n        limitPage,\n        rowsPerPage,\n        data,\n        fetching,\n        visibleModal,\n        handleChangePage,\n        handleChangeRowsPerPage,\n        handleClickTableCell,\n        handleCloseMonitorModal,\n    } = props;\n\n    const columns = MockupColumns;\n    const { getTableProps, headerGroups, rows, prepareRow } = useTable({\n        columns,\n        data,\n    });\n\n    const onClickTableCell = (item: ITableData) => {\n        if (!item) return;\n        handleClickTableCell && handleClickTableCell(item);\n    };\n\n    const onCloseModal = () => {\n        handleCloseMonitorModal && handleCloseMonitorModal();\n    };\n\n    const renderHeader = () => (\n        <TableHead>\n            {headerGroups.map((headerGroup) => (\n                <TableRow className=\"header-row\" {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map((column) => {\n                        return <TableCell {...column.getHeaderProps()}>{column.render('Header')}</TableCell>;\n                    })}\n                </TableRow>\n            ))}\n        </TableHead>\n    );\n\n    const renderBody = () => (\n        <TableBody>\n            {rows.map((row, index) => {\n                prepareRow(row);\n                return (\n                    <TableRow className={`table-row ${index % 2 !== 0 ? 'dark-row' : ''}`} {...row.getRowProps()}>\n                        {row.cells.map((cell) => {\n                            const value: any = cell.row.original;\n                            const header = cell.column.Header;\n                            const className = header === 'Vote Stats' ? 'break-line' : '';\n                            return (\n                                <TableCell\n                                    onClick={() => onClickTableCell(value)}\n                                    className={`table-cell ${className}`}\n                                    {...cell.getCellProps()}\n                                >\n                                    {cell.render('Cell')}\n                                </TableCell>\n                            );\n                        })}\n                    </TableRow>\n                );\n            })}\n        </TableBody>\n    );\n\n    const onChangePage = (_: React.MouseEvent<HTMLButtonElement> | null, page: number) =>\n        handleChangePage && handleChangePage(page);\n\n    const onChangeRowsPerPage = () => handleChangeRowsPerPage && handleChangeRowsPerPage();\n\n    const renderPagination = () => {\n        if (!limitPage) return null;\n        return (\n            <TablePagination\n                component=\"div\"\n                count={limitPage}\n                page={currentPage}\n                rowsPerPage={rowsPerPage}\n                rowsPerPageOptions={[]}\n                onChangePage={onChangePage}\n                onChangeRowsPerPage={onChangeRowsPerPage}\n                className=\"pagination\"\n            />\n        );\n    };\n\n    return (\n        <Styled>\n            <Card className=\"card\">\n                <MaUTable {...getTableProps()}>\n                    {renderHeader()}\n                    {!fetching && renderBody()}\n                </MaUTable>\n                {!!fetching && <LoadingOverlay />}\n                {renderPagination()}\n            </Card>\n            <MonitorDetailModal visible={visibleModal} onClose={onCloseModal} />\n        </Styled>\n    );\n});\n\nexport default withEnhance(TableValidator);\n","import React from 'react';\nimport Table from 'src/modules/RedList/components/Table';\n\nconst RedList = React.memo(() => {\n    return <Table />;\n});\n\nexport default RedList;\n","import styled, { ITheme } from 'styled-components';\n\nexport const Styled = styled.div`\n    .card {\n        height: 100%;\n        overflow: auto;\n    }\n    .table-cell {\n        min-width: 100px;\n        :hover {\n            background-color: ${({ theme }: { theme: ITheme }) => theme.hoverRow};\n        }\n    }\n    .dark-row {\n        background-color: ${({ theme }: { theme: ITheme }) => theme.darkRow};\n    }\n    .table-row {\n        cursor: pointer;\n        :hover {\n            background-color: ${({ theme }: { theme: ITheme }) => theme.hoverRow};\n        }\n        > td {\n            text-align: center;\n            line-break: anywhere;\n            max-width: 200px;\n        }\n    }\n    .header-row {\n        background-color: ${({ theme }: { theme: ITheme }) => theme.headerRow};\n        th {\n            font-weight: bold;\n            text-align: center;\n        }\n    }\n    .wrap-loading {\n        height: 100px;\n    }\n    .pagination {\n        padding-left: 0;\n        position: absolute;\n        right: 15px;\n    }\n    .break-line {\n        white-space: pre;\n    }\n`;\n\nexport const ModalWrapper = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const CloseWrapper = styled.div`\n    width: 55px;\n    align-self: flex-end;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    margin-bottom: 5px;\n    margin-top: 13px;\n`;\n","import React from 'react';\nimport styled, { css, ITheme } from 'styled-components';\nimport { animated, useTransition } from 'react-spring';\nimport { DialogOverlay, DialogContent } from '@reach/dialog';\nimport { isMobile } from 'react-device-detect';\nimport '@reach/dialog/styles.css';\nimport { transparentize } from 'polished';\n\nconst AnimatedDialogOverlay = animated(DialogOverlay);\nconst StyledDialogOverlay = styled(AnimatedDialogOverlay)`\n    &[data-reach-dialog-overlay] {\n        z-index: 2;\n        background-color: ${({ theme }: { theme: ITheme }) => theme.modalBg};\n        overflow: hidden;\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        background-color: ${({ theme }) => theme.modalBG};\n    }\n`;\n\nconst AnimatedDialogContent = animated(DialogContent);\n// destructure to not pass custom props to Dialog DOM element\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst StyledDialogContent = styled(({ minHeight, maxHeight, mobile, isOpen, ...rest }) => (\n    <AnimatedDialogContent {...rest} />\n)).attrs({\n    'aria-label': 'dialog',\n})`\n    overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n    &[data-reach-dialog-content] {\n        margin: 0 0 2rem 0;\n        background-color: ${({ theme }) => theme.white};\n        box-shadow: 0 4px 8px 0 ${({ theme }) => transparentize(0.95, '#000')};\n        padding: 0px;\n        width: 50vw;\n        overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n        overflow-x: hidden;\n        max-width: 600px;\n        ${({ maxHeight }) =>\n            maxHeight &&\n            css`\n                max-height: ${maxHeight}vh;\n            `}\n        ${({ minHeight }) =>\n            minHeight &&\n            css`\n                min-height: ${minHeight}vh;\n            `}\n    display: flex;\n        border-radius: 20px;\n        ${({ theme }) => theme.mediaWidth.upToMedium`\n      width: 65vw;\n      margin: 0;\n    `}\n        ${({ theme, mobile }) => theme.mediaWidth.upToSmall`\n      width:  85vw;\n      ${\n          mobile &&\n          css`\n              width: 90vw;\n              height: 85vh;\n              border-radius: 20px;\n          `\n      }\n    `}\n    }\n`;\n\ninterface ModalProps {\n    isOpen: boolean;\n    onDismiss: () => void;\n    minHeight?: number | false;\n    maxHeight?: number;\n    initialFocusRef?: React.RefObject<any>;\n    children?: React.ReactNode;\n}\n\nexport default function Modal({\n    isOpen,\n    onDismiss,\n    minHeight = false,\n    maxHeight = 90,\n    initialFocusRef,\n    children,\n}: ModalProps) {\n    const fadeTransition = useTransition(isOpen, null, {\n        config: { duration: 200 },\n        from: { opacity: 0 },\n        enter: { opacity: 1 },\n        leave: { opacity: 0 },\n    });\n\n    return (\n        <>\n            {fadeTransition.map(\n                ({ item, key, props }) =>\n                    item && (\n                        <StyledDialogOverlay\n                            key={key}\n                            style={props}\n                            onDismiss={onDismiss}\n                            initialFocusRef={initialFocusRef}\n                        >\n                            <StyledDialogContent\n                                aria-label=\"dialog content\"\n                                minHeight={minHeight}\n                                maxHeight={maxHeight}\n                                mobile={isMobile}\n                            >\n                                {children}\n                            </StyledDialogContent>\n                        </StyledDialogOverlay>\n                    ),\n            )}\n        </>\n    );\n}\n","import React, { memo } from 'react';\nimport Modal from 'src/components/Modal';\nimport { CloseWrapper, ModalWrapper } from 'src/modules/NodeMonitor/components/Table/styled';\nimport { CloseIcon } from 'src/components/Icons';\nimport MonitorDetail from 'src/modules/NodeMonitor/components/MonitorDetail';\n\ninterface IProps {\n    visible: boolean;\n    onClose: () => void;\n}\n\nconst MonitorDetailModal = ({ visible, onClose }: IProps) => {\n    return (\n        <Modal isOpen={visible} onDismiss={onClose}>\n            <ModalWrapper>\n                <CloseWrapper onClick={onClose}>\n                    <CloseIcon width=\"18\" height=\"18\" />\n                </CloseWrapper>\n                <MonitorDetail />\n            </ModalWrapper>\n        </Modal>\n    );\n};\n\nexport default memo(MonitorDetailModal);\n"],"sourceRoot":""}